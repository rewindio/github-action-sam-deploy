name: Deploy SAM application

on:
  workflow_call:
    inputs:
      s3_bucket:
        description: "The bucket to store your SAM application in"
        required: true
        type: string
      region:
        description: "The region to deploy your SAM application in"
        required: false
        default: "us-east-1"
        type: string
      stack_name:
        description: "The stack name of your application"
        required: true
        type: string
      sam_params_repo_path:
        description: "The path from the repository root to your SAM parameter config file"
        required: true
        default: "sam-params/st-us-east-1.cfg"
        type: string
      extra_sam_args:
        description: "Extra SAM arguments to apply."
        required: false
        type: string

    secrets:
      AWS_ACCESS_KEY_ID:
        description: "The AWS Access Key ID for staging."
        required: true
      AWS_SECRET_ACCESS_KEY:
        description: "The AWS Secret Access Key for staging"
        required: true

      DEPLOY_FAILURES_SLACK_WEBHOOK_URL:
        description: "The Slack webhook url that maps to a Slack channel. This channel will be notified after a failed deploy."
        required: true
      DEPLOY_SUCCESS_SLACK_WEBHOOK_URL:
        description: "The Slack webhook url that maps to a Slack channel. This channel will be notified after a successful deploy."
        required: true
      LOOKUP_USER_EMAIL_SLACK_TOKEN:
        description: |
          A token to look up users by email and message them directly.
          This requires the GitHub & Slack email to match, and the 'Keep my email addresses private' option disabled.
          No failures occur in other cases.
        required: true
      EXTRA_SAM_BUILD_ARGS:
        description: "Optional SAM build arguments to use (i.e. --container-env-var GITHUB_TOKEN=snip)."
        required: false

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Setup SAM
        uses: aws-actions/setup-sam@v1
        with:
          version: 1.37.0

      - name: Cache SAM build
        id: cache
        uses: actions/cache@v2
        with:
          path: |
            .aws-sam/build/
          key: ${{ runner.os }}-${{ github.sha }}

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ inputs.region }}

      - name: SAM Validate
        run: sam validate

      - name: SAM Build
        if: steps.cache.outputs.cache-hit != 'true'
        run: |
          sam build --use-container ${{ secrets.EXTRA_SAM_BUILD_ARGS }}

      - name: SAM Deploy
        run: |
          sam deploy \
            ${{ inputs.extra_sam_args }} \
            --stack-name ${{ inputs.stack_name }} \
            --s3-bucket ${{ inputs.s3_bucket }} \
            --region ${{ inputs.region }} \
            --parameter-overrides $( < "${{ inputs.sam_params_repo_path}}" )

      - name: Cleanup AWS Credentials
        run: rm -rf .aws

      - name: Set commit title
        # https://docs.github.com/en/actions/reference/workflow-commands-for-github-actions#setting-an-environment-variable
        continue-on-error: true
        # We take the first line (%s) from the git log and then escape out any single quotes
        # https://stackoverflow.com/a/24247870
        run: echo COMMIT_MESSAGE=$(git log -n 1 --pretty=format:%s) >> $GITHUB_ENV

      - name: Notify Slack on Success
        uses: ravsamhq/notify-slack-action@v1
        if: always()
        with:
          status: ${{ job.status }}
          token: ${{ secrets.GITHUB_TOKEN }}
          notification_title: '{emoji} <{run_url}|{workflow}> to ${{ inputs.stack_name }} in ${{ inputs.region }} has {status_message}'
          message_format: >
            ${{ github.actor }} pushed <{commit_url}|${{ env.COMMIT_TITLE }}>
          footer: '<{repo_url}|{repo}>'
          notify_when: 'success'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.DEPLOY_SUCCESS_SLACK_WEBHOOK_URL }}

      - name: Notify Slack on Failure
        uses: ravsamhq/notify-slack-action@v1
        if: always()
        with:
          status: ${{ job.status }}
          token: ${{ secrets.GITHUB_TOKEN }}
          notification_title: '{emoji} <{run_url}|{workflow}> to ${{ inputs.stack_name }} in ${{ inputs.region }} has {status_message}'
          message_format: >
            ${{ github.actor }} pushed <{commit_url}|${{ env.COMMIT_TITLE }}>
          footer: '<{repo_url}|{repo}>'
          notify_when: 'failure'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.DEPLOY_FAILURES_SLACK_WEBHOOK_URL }}

      - name: Find Slack user
        if: failure()
        id: find-slack-user
        uses: scribd/find-slack-user-action@v1
        with:
          include-at-symbol: true
          slack-token: ${{ secrets.LOOKUP_USER_EMAIL_SLACK_TOKEN }}

      - name: Send a Slack DM to the user linking the failure
        if: failure()
        uses: archive/github-actions-slack@v2.2.1
        with:
          slack-function: send-message
          slack-bot-user-oauth-access-token: ${{ secrets.LOOKUP_USER_EMAIL_SLACK_TOKEN }}
          slack-channel: "${{ steps.find-slack-user.outputs.username }}"
          slack-text: |
            <@${{ steps.find-slack-user.outputs.member-id }}>: <${{ env.RUN_URL }}|${{ env.COMMIT_TITLE }}> has failed.
        env:
          RUN_URL: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}

